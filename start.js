const {Telegraf, Markup, Input} = require('telegraf');
const token = // your token;

const bot = new Telegraf(token);

const fs = require('fs');
const path = require('node:path');

const xlsx = require('xlsx');

const moment = require('moment');

const mysql = require("mysql2");

const cron = require('node-cron');

let num_task = 0;//–¥–ª—è –∞–¥–º–∏–Ω–∞, –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞–Ω–∏—è

let pagination_num; //–¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π
let pagination_page; //-----
let pagination_page1; //----

let pagination_num_bad; //–¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
var pagination_page_bad; //++++++
var pagination_page1_bad; //+++++

// –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥
var connection = mysql.createConnection({
  host: /*host*/,
  port: /*port*/,
  user: /*user*/,
  database: /*database*/,
  password: /*password*/
});

// —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
cron.schedule('50 * * * *', () => {
  connection.connect(function(err){
    if (err) {
      return console.error("–û—à–∏–±–∫–∞: " + err.message);
      connection = mysql.createConnection({
        host: /*host*/,
        port: /*port*/,
        user: /*user*/,
        database: /*database*/,
        password: /*password*/
      });
    }
    else{
      console.log("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
    }
  });
});

// –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–∂–¥—ã–π —á–∞—Å, —á—Ç–æ–± —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è –Ω–µ —É–º–∏—Ä–∞–ª
cron.schedule('50 * * * *', () => {
  connection.query("SELECT id FROM task WHERE status = 0", (err) => {
    if(err) console.log(err);
  });
});

// —Ñ—É–Ω–∫—Ü–∏—è —Å–Ω–∞ (—É–¥–∞–ª–∏—Ç—å –≤ –∫–æ–Ω—Ü–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
function sleep(milliseconds) {
  const date = Date.now();
  let currentDate = null;
  do {
    currentDate = Date.now();
  } while (currentDate - date < milliseconds);
}

// –ø–∞–≥–∏–Ω–∞—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º
function listPrintRed(res){

  console.log('bad task watch');

  if(res.length < 5){
    let str_mass = [];
    for(let i = 0; i < res.length; i++){

      let mass_o = [];
      let str = '';

      for(let j = 0; j < 1; j++){

        mass_o[j] = '–ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è: ' + res[i].id;
        mass_o[j+1] = '–ó–∞–¥–∞–Ω–∏–µ: ' + res[i].point;
        mass_o[j+2] = '–°—Ç–∞—Ç—É—Å: üî¥ (–≤—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ)' + '\n----------------------\n';
        str = mass_o.join('\n');
      }
      str_mass[i] = str;
    }
    return str_mass;
  }

  let str_mass = [];

  let first = res.length - 5 * pagination_num_bad;
  let second = res.length - 5 * (pagination_num_bad - 1);

  if(first <= 0){
    first = 0;
    second = 5;
  }
  if(second > res.length){
    second = res.length;
  }

  for(let i = first; i < second; i++){
    let mass = [];
    let str = '';
    for(let j = 0; j < 1; j++){
      mass[j] = '–ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è: ' + res[i].id;
      mass[j+1] = '–ó–∞–¥–∞–Ω–∏–µ: ' + res[i].point;
      mass[j+2] = '–°—Ç–∞—Ç—É—Å: üî¥ (–≤—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ)' + '\n----------------------\n';
      str = mass.join('\n');
    }
    str_mass[i] = str;
  }
  return str_mass;
}

// –ø–∞–≥–∏–Ω–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π
function listPrintAll(res){

  console.log('task watch');

  if(res.length < 5){
    let str_mass = [];
    for(let i = 0; i < res.length; i++){

      let mass_o = [];
      let str = '';

      for(let j = 0; j < 1; j++){

        mass_o[j] = '–ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è: ' + res[i].id;
        mass_o[j+1] = '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ' + res[i].create_date.toLocaleDateString();
        mass_o[j+2] = '–ó–∞–¥–∞–Ω–∏–µ: ' + res[i].point;
        mass_o[j+3] = '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: ' + res[i].responsible;
        if(res[i].dead_line == null) mass_o[j+4] = '–°—Ä–æ–∫ —Å–¥–∞—á–∏: -';
        else mass_o[j+4] = '–°—Ä–æ–∫ —Å–¥–∞—á–∏: ' + res[i].dead_line.toLocaleDateString();

        switch (res[i].status) {
          case 0:
          mass_o[j+5] = '–°—Ç–∞—Ç—É—Å: üîµ (–Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ)';
          break;

          case 1:
          mass_o[j+5] = '–°—Ç–∞—Ç—É—Å: üü° (–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)';
          break;

          case 2:
          mass_o[j+5] = '–°—Ç–∞—Ç—É—Å: üü¢ (–≤—ã–ø–æ–ª–Ω–µ–Ω–æ)';
          break;

          case 3:
          mass_o[j+5] = '–°—Ç–∞—Ç—É—Å: üî¥ (–≤—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ)';
          break;

          case 4:
          mass_o[j+5] = '–°—Ç–∞—Ç—É—Å: ‚ö™ (–∂–¥—ë—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏)';
          break;

        }
        if(res[i].complete_date != null){
          mass_o[j+6] = '–í—ã–ø–æ–ª–Ω–µ–Ω–æ: ' + res[i].complete_date.toLocaleDateString() + '\n----------------------\n';
        } else mass_o[j+6] = '\n----------------------\n';
        str = mass_o.join('\n');
      }
      str_mass[i] = str;
    }
    return str_mass;
  }

  let str_mass = [];

  let first = res.length - 5 * pagination_num;
  let second = res.length - 5 * (pagination_num - 1);

  if(first <= 0){
    first = 0;
    second = 5;
  }
  if(second > res.length){
    second = res.length;
    first = res.length - 5;
  }

  for(let i = first; i < second; i++){

    let mass = [];
    let str = '';

    for(let j = 0; j < 1; j++){

      mass[j] = '–ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è: ' + res[i].id;
      mass[j+1] = '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ' + res[i].create_date.toLocaleDateString();
      mass[j+2] = '–ó–∞–¥–∞–Ω–∏–µ: ' + res[i].point;
      mass[j+3] = '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: ' + res[i].responsible;
      if(res[i].dead_line == null) mass[j+4] = '–°—Ä–æ–∫ —Å–¥–∞—á–∏: -';
      else mass[j+4] = '–°—Ä–æ–∫ —Å–¥–∞—á–∏: ' + res[i].dead_line.toLocaleDateString();

      switch (res[i].status) {
        case 0:
        mass[j+5] = '–°—Ç–∞—Ç—É—Å: üîµ (–Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ)';
        break;

        case 1:
        mass[j+5] = '–°—Ç–∞—Ç—É—Å: üü° (–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)';
        break;

        case 2:
        mass[j+5] = '–°—Ç–∞—Ç—É—Å: üü¢ (–≤—ã–ø–æ–ª–Ω–µ–Ω–æ)';
        break;

        case 3:
        mass[j+5] = '–°—Ç–∞—Ç—É—Å: üî¥ (–≤—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ)';
        break;

        case 4:
        mass[j+5] = '–°—Ç–∞—Ç—É—Å: ‚ö™ (–∂–¥—ë—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏)';
        break;

      }
      if(res[i].complete_date != null){
        mass[j+6] = '–í—ã–ø–æ–ª–Ω–µ–Ω–æ: ' + res[i].complete_date.toLocaleDateString() + '\n----------------------\n';
      } else mass[j+6] = '\n----------------------\n';
      str = mass.join('\n');
    }
    str_mass[i] = str;
  }
  return str_mass;
}

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π
function message_process(){

  bot.on('message', (ctx) => {

    connection.query("SELECT access_modifier FROM user WHERE chat_id = ?", ctx.message.chat.id, (err, results) => {
      if(err) console.log(err);
      else{

        if(results[0].access_modifier == 1){

          let mass = ctx.update.message.text.split(' ');

          // console.log(typeof Number(mass[0]));
          // console.log(mass[50]);

          if(mass[0] == '–°—Ç–æ–ø'){
            return 0;
          }




          if(typeof mass[1] != 'string'){
            num_task = Number(mass[0]);
            connection.query("SELECT status FROM task WHERE id = ?", num_task, (err, result) => {
              if(err) console.log(err);
              else{
                if(result[0].status == 4){

                  ctx.replyWithHTML('–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–¥–∞–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞—è–≤–ª–µ–Ω–Ω–æ–º—É?', Markup.inlineKeyboard([
                    [Markup.button.callback('üëç', 'task_good'), Markup.button.callback('üëé', 'task_bad')],
                    [Markup.button.callback('–ù–∞–∑–∞–¥', 'back')]
                  ]));
                  console.log('Check task from admin');

                } else if(result[0].status == 3){
                  connection.query("UPDATE task SET responsible = 'NULL', dead_line = NULL, status = 0, complete_date = NULL WHERE id = ?", num_task, (err) => {
                    if(err) console.log(err);
                    console.log('Bad task back to start from admin');
                  });

                  connection.query("SELECT chat_id FROM user WHERE access_modifier = 2", (err, resul) => {
                    if(err) console.log(err);
                    else{
                      if(resul.length == 0){
                        return 0;
                      }
                      let id = Number(resul[0].chat_id);
                      fetch(`https://api.telegram.org/bot${token}/sendMessage?chat_id=${id}&text=–ó–∞–¥–∞–Ω–∏–µ+${num_task}+–∂–¥—ë—Ç+–¥–æ–±–∞–≤–ª–µ–Ω–∏—è.+–ü—Ä–æ–≤–µ—Ä—å—Ç–µ+—Å–ø–∏—Å–æ–∫+–∑–∞–¥–∞–Ω–∏–π.`, (error) => {
                        if(error) console.error('error:', error);
                      });
                    }
                  });
                  ctx.replyWithHTML('–ó–∞–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ —Å—Ç–∞—Ç—É—Å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è');
                }
              }
            });
            return 0;

          } else if(new Date(mass[0].replace(/(\d+).(\d+).(\d+)/, '$1/$2/$3')) != 'Invalid Date'){
            console.log('Period of date from admin');
            var first = new Date(mass[0].replace(/(\d+).(\d+).(\d+)/, '$1/$2/$3'));
            var second = new Date(mass[1].replace(/(\d+).(\d+).(\d+)/, '$1/$2/$3'));
            var mass_a = [first, second];
            connection.query("SELECT * FROM task WHERE (create_date BETWEEN ? AND ?)", mass_a, (err, res) => {
              if(err){
                console.log(err);
                return 0;
              } else{
                if(res.length == 0){
                  ctx.replyWithHTML('–ó–∞–¥–∞–Ω–∏–π –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –Ω–µ—Ç');
                  return 0;
                }
                let str_mass = [];
                for(let i = 0; i < res.length; i++){

                  let mass_o = [];
                  let str = '';

                  for(let j = 0; j < 1; j++){

                    mass_o[j] = '–ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è: ' + res[i].id;
                    mass_o[j+1] = '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ' + res[i].create_date.toLocaleDateString();
                    mass_o[j+2] = '–ó–∞–¥–∞–Ω–∏–µ: ' + res[i].point;
                    mass_o[j+3] = '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: ' + res[i].responsible;
                    if(res[i].dead_line == null) mass_o[j+4] = '–°—Ä–æ–∫ —Å–¥–∞—á–∏: -';
                    else mass_o[j+4] = '–°—Ä–æ–∫ —Å–¥–∞—á–∏: ' + res[i].dead_line.toLocaleDateString();

                    switch (res[i].status) {
                      case 0:
                      mass_o[j+5] = '–°—Ç–∞—Ç—É—Å: üîµ (–Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ)';
                      break;

                      case 1:
                      mass_o[j+5] = '–°—Ç–∞—Ç—É—Å: üü° (–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)';
                      break;

                      case 2:
                      mass_o[j+5] = '–°—Ç–∞—Ç—É—Å: üü¢ (–≤—ã–ø–æ–ª–Ω–µ–Ω–æ)';
                      break;

                      case 3:
                      mass_o[j+5] = '–°—Ç–∞—Ç—É—Å: üî¥ (–≤—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ)';
                      break;

                      case 4:
                      mass_o[j+5] = '–°—Ç–∞—Ç—É—Å: ‚ö™ (–∂–¥—ë—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏)';
                      break;

                    }
                    if(res[i].complete_date != null){
                      mass_o[j+6] = '–í—ã–ø–æ–ª–Ω–µ–Ω–æ: ' + res[i].complete_date.toLocaleDateString() + '\n----------------------\n';
                    } else mass_o[j+6] = '\n----------------------\n';
                    str = mass_o.join('\n');
                  }
                  str_mass[i] = str;
                }
                ctx.replyWithHTML(str_mass.join(''), Markup.inlineKeyboard([
                  [Markup.button.callback('–ù–∞–∑–∞–¥', 'back')]
                ]));
                // console.log(str_mass);
              }

            });
            return 0;
          }

          console.log('Create task from admin');
          let now = moment().format("YYYY/MM/DD");
          let point = ctx.update.message.text;


          let mass_of = [now, point, '-', null];

          connection.query("INSERT INTO task(`create_date`, `point`, `status`, `responsible`, `dead_line`) VALUES(?, ?, 0, ?, ?)", mass_of, (err) => {
            if(err) console.log(err);
          });

          connection.query("SELECT chat_id FROM user WHERE access_modifier = 2", (err, results) => {
            if(err) console.log(err);
            else{
              if(results.length == 0){
                return 0;
              }
              let id = Number(results[0].chat_id);
              fetch(`https://api.telegram.org/bot${token}/sendMessage?chat_id=${id}&text=–ù–æ–≤–æ–µ+–∑–∞–¥–∞–Ω–∏–µ+–∂–¥—ë—Ç+–¥–æ–±–∞–≤–ª–µ–Ω–∏—è.+–ü—Ä–æ–≤–µ—Ä—å—Ç–µ+—Å–ø–∏—Å–æ–∫+–∑–∞–¥–∞–Ω–∏–π.`, (error) => {
                if(error) console.error('error:', error);
              });
            }
          });

          ctx.replyWithHTML('–ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ');
          return 0;

        } else if(results[0].access_modifier == 2){

          let mass = ctx.update.message.text.split(' ');

          if(typeof mass[1] == 'undefined'){

            console.log('Send to check task from disp');
            connection.query("SELECT status FROM task WHERE id = ?", mass[0], (err, res) => {
              if(err){
                console.log(err); return 0;
              } else{
                if(res[0].status == 0){
                  ctx.replyWithHTML('–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –Ω–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ');
                  return 0;
                } else{
                  let num = Number(mass[0]);

                  connection.query("UPDATE task SET status = 4 WHERE id = ?", num, (err) => {
                    if(err) console.log(err);
                  })

                  connection.query("SELECT chat_id FROM user WHERE access_modifier = 1", (err, results) => {
                    if(err) console.log(err);
                    else{

                      if(results.length == 0){
                        return 0;
                      }

                      let id = Number(results[0].chat_id);

                      fetch(`https://api.telegram.org/bot${token}/sendMessage?chat_id=${id}&text=–ù–æ–≤–æ–µ+–∑–∞–¥–∞–Ω–∏–µ+–∂–¥—ë—Ç+–ø—Ä–æ–≤–µ—Ä–∫–∏.+–ü—Ä–æ–≤–µ—Ä—å—Ç–µ+—Å–ø–∏—Å–æ–∫+–∑–∞–¥–∞–Ω–∏–π.`, (error) => {
                        if(error) console.error('error:', error);
                      });
                    }
                  });

                  ctx.replyWithHTML('–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É');
                  return 0;
                }
              }
            });
            return 0;
          }

          console.log('Update task from disp');
          mass[0] = Number(mass[0]);
          let mydate = mass[1];
          mydate = new Date(mydate.replace(/(\d+).(\d+).(\d+)/, '$1/$2/$3'));
          mass[2] = mass[2] + ' ' + mass[3] + ' ' + mass[4];
          mass_1 = [mydate, mass[2], mass[0]];

          connection.query("UPDATE task SET dead_line = ?, responsible = ?, status = 1 WHERE id = ?", mass_1, (err) => {
            if(err) console.log(err);
          });

          ctx.replyWithHTML('–ó–∞–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');

        } else ctx.reply('–í—ã –ø–æ–ø—ã—Ç–∞–ª–∏—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è, –Ω–æ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
      }
    });
  });
}


// –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–¥ –≤ –≤–∏–¥–µ excel —Ñ–∞–π–ª–∞
bot.command('dump', (ctx) => {

  ctx.replyWithHTML('–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:\n\n0 - üîµ (–Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ)\n1 - üü° (–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)\n2 - üü¢ (–≤—ã–ø–æ–ª–Ω–µ–Ω–æ)\n3 - üî¥ (–≤—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ)\n4 - ‚ö™ (–∂–¥—ë—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏)', Markup.inlineKeyboard([Markup.button.callback('–ù–∞–∑–∞–¥', 'back')]));

  var filename = "all_" + Math.floor(Math.random() * 99999999) + ".xlsx";
  connection.query("SELECT * FROM task", (error, results) => {
    // (C1) EXTRACT DATA FROM DATABASE
    if (error) throw error;
    let data = [];
    data.push(["id", "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", "–ó–∞–¥–∞–Ω–∏–µ", "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π", "–°—Ä–æ–∫ —Å–¥–∞—á–∏", "–°—Ç–∞—Ç—É—Å", "–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å—Ä–æ–¥ —Å–¥–∞—á–∏"]);
    results.forEach(row => {
      data.push([row["id"], row["create_date"], row["point"], row["responsible"], row["dead_line"], row["status"], row["complete_date"]]);
    });

    // (C2) WRITE TO EXCEL FILE
    let worksheet = xlsx.utils.aoa_to_sheet(data),
    workbook = xlsx.utils.book_new();
    xlsx.utils.book_append_sheet(workbook, worksheet, "Tasks");
    xlsx.writeFile(workbook, filename);
    ctx.telegram.sendDocument(ctx.message.chat.id, Input.fromLocalFile(filename));
    setTimeout(() => {
      fs.unlinkSync(process.cwd() + "/" + filename);
    }, 500);
  });

  var filename_1 = "all_bad_" + Math.floor(Math.random() * 99999999) + ".xlsx";
  connection.query("SELECT * FROM task_bad", (error, results) => {
    // (C1) EXTRACT DATA FROM DATABASE
    if (error) throw error;
    let data = [];
    data.push(["id", "–ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è", "–ó–∞–¥–∞–Ω–∏–µ"]);
    results.forEach(row => {
      data.push([row["id"], row["num_bad"], row["point"]]);
    });

    // (C2) WRITE TO EXCEL FILE
    let worksheet = xlsx.utils.aoa_to_sheet(data),
    workbook = xlsx.utils.book_new();
    xlsx.utils.book_append_sheet(workbook, worksheet, "Tasks");
    xlsx.writeFile(workbook, filename_1);
    ctx.telegram.sendDocument(ctx.message.chat.id, Input.fromLocalFile(filename_1));
    setTimeout(() => {
      fs.unlinkSync(process.cwd() + "/" + filename_1);
    }, 500);
  });
});


// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç
bot.start(async(ctx) => {

  let chatId = ctx.message.chat.id;

  connection.query("SELECT * FROM user", function(err, results){
    if(err) console.log(err);

    if(results == null){
      connection.query("INSERT INTO user(`chat_id`, `access_modifier`) VALUES(?, 0)", ctx.message.chat.id, function(err, results) {
        if(err) console.log('–í –ø–µ—Ä–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ' + err);
        else console.log("–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã");
      });
    }

    let chek_reg = false;
    for(let i = 0; i < results.length; i++){
      if(ctx.message.chat.id == results[i].chat_id){
        chek_reg = true;
      }
    }

    if(chek_reg == false){
      connection.query("INSERT INTO user(`chat_id`, `access_modifier`) VALUES(?, 0)", ctx.message.chat.id, function(err, results) {
        if(err) console.log(err);
        else console.log("–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã");
        try{
          ctx.replyWithHTML('<b>–í—ã–±–µ—Ä–∏—Ç–µ –í–∞—à —Å—Ç–∞—Ç—É—Å</b>', Markup.inlineKeyboard([
            [Markup.button.callback('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', 'btn_adm'), Markup.button.callback('–î–∏—Å–ø–µ—Ç—á–µ—Ä', 'btn_disp')],
            [Markup.button.callback('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', 'btn_user')]
          ]));

        } catch(e){
          console.error(e);
        }
      });
    } else{
      // console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å');
      try{
        connection.query("SELECT access_modifier FROM user WHERE chat_id = ?", ctx.from.id, function(err, results){
          if(err) console.log(err);
          else{
            if(results[0].access_modifier == 1){
              ctx.replyWithHTML('<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ</b>', Markup.inlineKeyboard([
                [Markup.button.callback('üîµ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', 'btn_adm_task_add')],
                [Markup.button.callback('–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π', 'btn_task_watch'), Markup.button.callback('üî¥ –ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ', 'btn_bad_task')],
                [Markup.button.callback('‚ö™ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', 'btn_task_chek'), Markup.button.callback('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'statistic')],
                [Markup.button.callback('–ó–∞–¥–∞–Ω–∏—è —Å * –ø–æ *', 'btn_adm_task_sort')]
              ]));
            } else if(results[0].access_modifier == 2){
              ctx.replyWithHTML('<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ</b>', Markup.inlineKeyboard([
                [Markup.button.callback('üîµ –ù–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ', 'btn_disp_task_up')],
                [Markup.button.callback('–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π', 'btn_task_watch')],
                [Markup.button.callback('üü° –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', 'btn_disp_task_finish')]
              ]));
            } else if(results[0].access_modifier == 0){
              ctx.replyWithHTML('<b><i>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ</i></b>', Markup.inlineKeyboard([
                [Markup.button.callback('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π', 'btn_task_watch')]
              ]));
            }
          }
        });
      } catch(e){
        console.log(e);
      }
      try{
        ctx.replyWithHTML('<b>–í—ã–±–µ—Ä–∏—Ç–µ –í–∞—à —Å—Ç–∞—Ç—É—Å</b>', Markup.inlineKeyboard([
          [Markup.button.callback('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', 'btn_adm'), Markup.button.callback('–î–∏—Å–ø–µ—Ç—á–µ—Ä', 'btn_disp')],
          [Markup.button.callback('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', 'btn_user')]
        ]));

      } catch(e){
        console.error(e);
      }
    }

  });

});


// –≤—Ç–æ—Ä–æ–π —Å–ª–æ–π, –≤–µ—Ç–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
bot.use(async(ctx, next) => {

  try{
    if (ctx.callbackQuery) {

      // console.log(ctx.update.callback_query.message);
      ctx.deleteMessage(ctx.update.callback_query.message.message_id, ctx.update.callback_query.message.chat.id);
      await ctx.answerCbQuery();
      if(ctx.callbackQuery.data == 'btn_adm'){
        connection.query("UPDATE user SET access_modifier = 1 WHERE chat_id = ?", ctx.from.id, function(err, results){
              if(err) console.log(err);
        });
        await ctx.replyWithHTML('<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ</b>', Markup.inlineKeyboard([
          [Markup.button.callback('üîµ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', 'btn_adm_task_add')],
          [Markup.button.callback('–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π', 'btn_task_watch'), Markup.button.callback('üî¥ –ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ', 'btn_bad_task')],
          [Markup.button.callback('‚ö™ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', 'btn_task_chek'), Markup.button.callback('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'statistic')],
          [Markup.button.callback('–ó–∞–¥–∞–Ω–∏—è —Å * –ø–æ *', 'btn_adm_task_sort')]
        ]));
      }
      else if (ctx.callbackQuery.data == 'btn_disp'){
        connection.query("UPDATE user SET access_modifier = 2 WHERE chat_id = ?", ctx.from.id);
        await ctx.replyWithHTML('<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ</b>', Markup.inlineKeyboard([
          [Markup.button.callback('üîµ –ù–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ', 'btn_disp_task_up')],
          [Markup.button.callback('–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π', 'btn_task_watch')],
          [Markup.button.callback('üü° –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', 'btn_disp_task_finish')]
        ]));
      }
      else if(ctx.callbackQuery.data == 'btn_user'){
        connection.query("UPDATE user SET access_modifier = 0 WHERE chat_id = ?", ctx.from.id);
        await ctx.replyWithHTML('<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ</b>', Markup.inlineKeyboard([
          [Markup.button.callback('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π', 'btn_task_watch')]
        ]));
      }
    }
  } catch(e){
    console.log(e);
  }


  return next();
});


// —Ç—Ä–µ—Ç–∏–π —Å–ª–æ–π
bot.use(async (ctx, next) =>{

  try {
    if(ctx.callbackQuery){
      await ctx.answerCbQuery();
      if(ctx.callbackQuery.data == 'btn_task_watch' || ctx.callbackQuery.data == 'pag_back_btn_task_watch' || ctx.callbackQuery.data == 'pag_forward_btn_task_watch'){

        connection.query("SELECT * FROM task", (err, results) => {
          if(err) console.log(err);
          else if(results == ''){
            ctx.replyWithHTML('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π', Markup.inlineKeyboard([
              [Markup.button.callback('–ù–∞–∑–∞–¥', 'back')]
            ]));

          } else{
            if(ctx.callbackQuery.data == 'btn_task_watch'){

              pagination_num = 1;

              connection.query("SELECT * FROM task ORDER BY id DESC LIMIT 1", (err, result) => {
                if(err) console.log(err);

                pagination_page = Math.ceil(result[0].id/5);
                pagination_page1 = pagination_page;

                let spisok = listPrintAll(results);

                ctx.replyWithHTML(`${spisok.join('')}`, Markup.inlineKeyboard([
                  [Markup.button.callback('<', 'pag_back_btn_task_watch'), Markup.button.callback(`${pagination_page1}/${pagination_page}`, 'back'), Markup.button.callback('>', 'pag_forward_btn_task_watch')],
                  [Markup.button.callback('–ù–∞–∑–∞–¥', 'back')]
                ]));
              });

            } else if(ctx.callbackQuery.data == 'pag_back_btn_task_watch'){

              pagination_num++;
              pagination_page1--;

              connection.query("SELECT * FROM task ORDER BY id DESC LIMIT 1", (err, result) => {
                if(err) console.log(err);

                let spisok = listPrintAll(results);

                ctx.replyWithHTML(`${spisok.join('')}`, Markup.inlineKeyboard([
                  [Markup.button.callback('<', 'pag_back_btn_task_watch'), Markup.button.callback(`${pagination_page1}/${pagination_page}`, 'back'), Markup.button.callback('>', 'pag_forward_btn_task_watch')],
                  [Markup.button.callback('–ù–∞–∑–∞–¥', 'back')]
                ]));
              });

            } else if(ctx.callbackQuery.data == 'pag_forward_btn_task_watch'){

              pagination_num--;
              pagination_page1++;

              connection.query("SELECT * FROM task ORDER BY id DESC LIMIT 1", (err, result) => {
                if(err) console.log(err);

                let spisok = listPrintAll(results);

                ctx.replyWithHTML(`${spisok.join('')}`, Markup.inlineKeyboard([
                  [Markup.button.callback('<', 'pag_back_btn_task_watch'), Markup.button.callback(`${pagination_page1}/${pagination_page}`, 'back'), Markup.button.callback('>', 'pag_forward_btn_task_watch')],
                  [Markup.button.callback('–ù–∞–∑–∞–¥', 'back')]
                ]));
              });
            }
          }
        });


      } else if(ctx.callbackQuery.data == 'btn_disp_task_up'){
        connection.query("SELECT id, point FROM task WHERE status = 0", (err, results) => {
          if(err) console.log(err);
          else if(results == ''){
            ctx.replyWithHTML('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π', Markup.inlineKeyboard([
              [Markup.button.callback('–ù–∞–∑–∞–¥', 'back')]
            ]));

          } else{
            let str_mass = [];

            for(let i = 0; i < results.length; i++){
              let mass = [];
              let str = '';
              for(let j = 0; j < 1; j++){
                mass[j] = '–ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è: ' + results[i].id;
                mass[j+1] = '–ó–∞–¥–∞–Ω–∏–µ: ' + results[i].point + '\n ----------- \n';
                str = mass.join('\n');
              }
              str_mass[i] = str;
            }
            ctx.replyWithHTML(`${str_mass.join('')}` + '\n<b>–í–≤–µ–¥–∏–¥—Ç–µ –Ω–æ–º–µ—Ä, —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –∏ –§–ò–û –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å.\n\n<i>–ü—Ä–∏–º–µ—Ä: 4 2023.09.29 –ò–≤–∞–Ω–æ–≤ –ü–∞–≤–µ–ª –°–µ–º—ë–Ω–æ–≤–∏—á</i></b>', Markup.inlineKeyboard([
              [Markup.button.callback('–ù–∞–∑–∞–¥', 'back')]
            ]));
            message_process();
          }
        });

      } else if(ctx.callbackQuery.data == 'btn_adm_task_add'){
        let today = new Date();
        let point;
        await ctx.replyWithHTML('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å.', Markup.inlineKeyboard([
          [Markup.button.callback('–ù–∞–∑–∞–¥', 'back')]
        ]));
        message_process();
        // ctx.callbackQuery = 'btn_adm';
      } else if(ctx.callbackQuery.data == 'btn_disp_task_finish'){
        connection.query("SELECT id, point, status FROM task WHERE status = 1 AND 3", (err, results) => {
          if(err) console.log(err);
          else if(results == ''){
            ctx.replyWithHTML('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π', Markup.inlineKeyboard([
              [Markup.button.callback('–ù–∞–∑–∞–¥', 'back')]
            ]));

          } else{
            let str_mass = [];

            for(let i = 0; i < results.length; i++){
              let mass = [];
              let str = '';
              for(let j = 0; j < 1; j++){
                mass[j] = '–ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è: ' + results[i].id;
                mass[j+1] = '–ó–∞–¥–∞–Ω–∏–µ: ' + results[i].point;
                switch (results[i].status) {

                  case 1:
                    mass[j+2] = '–°—Ç–∞—Ç—É—Å: üü° (–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)' + '\n ----------- \n';
                    break;

                  case 3:
                    mass[j+2] = '–°—Ç–∞—Ç—É—Å: üî¥ (–≤—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ)' + '\n ----------- \n';
                    break;

                }
                str = mass.join('\n');
              }
              str_mass[i] = str;
            }
            ctx.replyWithHTML(`${str_mass.join('')}` + '\n<b>–í–≤–µ–¥–∏–¥—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.</b>', Markup.inlineKeyboard([
              [Markup.button.callback('–ù–∞–∑–∞–¥', 'back')]
            ]));
            message_process();
          }
        });

      } else if(ctx.callbackQuery.data == 'btn_bad_task' || ctx.callbackQuery.data == 'pag_back_btn_bad_task' || ctx.callbackQuery.data == 'pag_forward_btn_bad_task'){
        connection.query("SELECT id, point, status FROM task WHERE status = 3", (err, results) => {
          if(err) console.log(err);
          else if(results == ''){
            ctx.replyWithHTML('–ù–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –∑–∞–¥–∞–Ω–∏–π', Markup.inlineKeyboard([
              [Markup.button.callback('–ù–∞–∑–∞–¥', 'back')]
            ]));

          } else{

            if(ctx.callbackQuery.data == 'btn_bad_task'){

              pagination_num_bad = 1;

              connection.query("SELECT * FROM task WHERE status = 3", (err, result) => {
                if(err) console.log(err);

                pagination_page_bad = Math.ceil(result.length/5);
                pagination_page1_bad = pagination_page_bad;

                let spisok = listPrintRed(results);

                ctx.replyWithHTML(`${spisok.join('')}`, Markup.inlineKeyboard([
                  [Markup.button.callback('<', 'pag_back_btn_bad_task'), Markup.button.callback(`${pagination_page1_bad}/${pagination_page_bad}`, 'back'), Markup.button.callback('>', 'pag_forward_btn_bad_task')],
                  [Markup.button.callback('–ù–∞–∑–∞–¥', 'back')]
                ]));
              });
            } else if(ctx.callbackQuery.data == 'pag_back_btn_bad_task'){

              pagination_num_bad++;
              pagination_page1_bad--;

              connection.query("SELECT * FROM task WHERE status = 3 ORDER BY id DESC LIMIT 1", (err, result) => {
                if(err) console.log(err);

                let spisok = listPrintRed(results);

                ctx.replyWithHTML(`${spisok.join('')}`, Markup.inlineKeyboard([
                  [Markup.button.callback('<', 'pag_back_btn_bad_task'), Markup.button.callback(`${pagination_page1_bad}/${pagination_page_bad}`, 'back'), Markup.button.callback('>', 'pag_forward_btn_bad_task')],
                  [Markup.button.callback('–ù–∞–∑–∞–¥', 'back')]
                ]));
              });
            } else if(ctx.callbackQuery.data == 'pag_forward_btn_bad_task'){

              pagination_num_bad--;
              pagination_page1_bad++;

              connection.query("SELECT * FROM task WHERE status = 3 ORDER BY id DESC LIMIT 1", (err, result) => {
                if(err) console.log(err);

                let spisok = listPrintRed(results);

                ctx.replyWithHTML(`${spisok.join('')}`, Markup.inlineKeyboard([
                  [Markup.button.callback('<', 'pag_back_btn_bad_task'), Markup.button.callback(`${pagination_page1_bad}/${pagination_page_bad}`, 'back'), Markup.button.callback('>', 'pag_forward_btn_bad_task')],
                  [Markup.button.callback('–ù–∞–∑–∞–¥', 'back')]
                ]));
              });
            }
          }
        });
      } else if(ctx.callbackQuery.data == 'btn_task_chek'){
        connection.query("SELECT id, point, status FROM task WHERE status = 4", (err, results) => {
          if(err) console.log(err);
          else if(results == ''){
            ctx.replyWithHTML('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π', Markup.inlineKeyboard([
              [Markup.button.callback('–ù–∞–∑–∞–¥', 'back')]
            ]));

          } else{

            console.log('watch');

            let str_mass = [];

            for(let i = 0; i < results.length; i++){
              let mass = [];
              let str = '';
              for(let j = 0; j < 1; j++){
                mass[j] = '–ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏: ' + results[i].id;
                mass[j+1] = '–ó–∞–¥–∞–Ω–∏–µ: ' + results[i].point;
                mass[j+2] = '–°—Ç–∞—Ç—É—Å: ‚ö™ (–∂–¥—ë—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏)' + '\n ----------- \n';
                str = mass.join('\n');
              }
              str_mass[i] = str;
            }
            ctx.replyWithHTML(`${str_mass.join('')}` + '\n<b>–í–≤–µ–¥–∏–¥—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ.</b>', Markup.inlineKeyboard([
              [Markup.button.callback('–ù–∞–∑–∞–¥', 'back')]
            ]));
            message_process();
          }
        });
      } else if(ctx.callbackQuery.data == 'statistic'){

        let mass = [];

        connection.query("SELECT id FROM task WHERE status = 2", (err, results) => {
          connection.query("SELECT id FROM task_bad", (err, result) => {
            connection.query("SELECT id FROM task WHERE status = 1", (err, resul) => {
              ctx.replyWithHTML(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Ö–æ—Ç—è-–±—ã –æ–¥–∏–Ω —Ä–∞–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –≤ —Å—Ä–æ–∫: ${result.length}\n-----------\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: ${results.length}\n-----------\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω—è–µ–º—ã—Ö –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–¥–∞–Ω–∏–π: ${resul.length}`, Markup.inlineKeyboard([[Markup.button.callback('–ù–∞–∑–∞–¥', 'back')]]));
              console.log('Statistic');
            });
          });
        });


      } else if(ctx.callbackQuery.data == 'btn_adm_task_sort'){
        ctx.replyWithHTML('–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞–Ω–∏—è\n\n–ü—Ä–∏–º–µ—Ä: 2001.12.29 2002.11.28', Markup.inlineKeyboard([
          [Markup.button.callback('–ù–∞–∑–∞–¥', 'back')]
        ]));
        message_process();
      }
      else if(ctx.callbackQuery.data == 'back'){
        try{
          connection.query("SELECT access_modifier FROM user WHERE chat_id = ?", ctx.from.id, function(err, results){
            if(err) console.log(err);
            else{
              if(results[0].access_modifier == 1){
                ctx.replyWithHTML('<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ</b>', Markup.inlineKeyboard([
                  [Markup.button.callback('üîµ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', 'btn_adm_task_add')],
                  [Markup.button.callback('–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π', 'btn_task_watch'), Markup.button.callback('üî¥ –ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ', 'btn_bad_task')],
                  [Markup.button.callback('‚ö™ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', 'btn_task_chek'), Markup.button.callback('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'statistic')],
                  [Markup.button.callback('–ó–∞–¥–∞–Ω–∏—è —Å * –ø–æ *', 'btn_adm_task_sort')]
                ]));
              } else if(results[0].access_modifier == 2){
                ctx.replyWithHTML('<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ</b>', Markup.inlineKeyboard([
                  [Markup.button.callback('üîµ –ù–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ', 'btn_disp_task_up')],
                  [Markup.button.callback('–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π', 'btn_task_watch')],
                  [Markup.button.callback('üü° –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', 'btn_disp_task_finish')]
                ]));
              } else if(results[0].access_modifier == 0){
                ctx.replyWithHTML('<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ</b>', Markup.inlineKeyboard([
                  [Markup.button.callback('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π', 'btn_task_watch')]
                ]));
              }
            }
          });
        } catch(e){
          console.log(e);
        }
      }

    }
  } catch (e) {
    console.log(e);
  }
  return next();

});


// —á–µ—Ç–≤—ë—Ä—Ç—ã–π —Å–ª–æ–π
bot.use(async (ctx, next) =>{
  try{

    if(ctx.callbackQuery){

      ctx.answerCbQuery();

      if(ctx.callbackQuery.data == 'task_good'){
        let now = moment().format("YYYY/MM/DD");
        let mass_2 = [now, num_task];
        connection.query("UPDATE task SET status = 2, complete_date = ? WHERE id = ?", mass_2, (err) => {
          if(err) console.log(err);
        });

        ctx.replyWithHTML('–ó–∞–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');

      } else if(ctx.callbackQuery.data == 'task_bad'){
        connection.query("UPDATE task SET status = 3 WHERE id = ?", num_task, (err) =>{
          if(err) console.log(err);
        });

        ctx.replyWithHTML('–ó–∞–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
      }
    }
  } catch(e){
    console.log(e);
  }

  return next();
});


bot.launch();

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
